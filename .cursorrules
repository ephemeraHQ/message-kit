# MessageKit

# Skill Examples

### Check if a Domain is Available


import { ensUrl } from "../index.js";
import { XMTPContext } from "@xmtp/message-kit";
import type { Skill } from "@xmtp/message-kit";

// Define Skill
export const checkDomain: Skill[] = [
  {
    skill: "check",
    handler: handler,
    examples: ["/check vitalik.eth", "/check fabri.base.eth"],
    description: "Check if a domain is available.",
    params: {
      domain: {
        type: "string",
      },
    },
  },
];

// Handler Implementation
export async function handler(context: XMTPContext) {
  const {
    message: {
      content: {
        params: { domain },
      },
    },
  } = context;

  const data = await context.getUserInfo(domain);

  if (!data?.address) {
    let message = `Looks like ${domain} is available! Here you can register it: ${ensUrl}${domain} or would you like to see some cool alternatives?`;
    return {
      code: 200,
      message,
    };
  } else {
    let message = `Looks like ${domain} is already registered!`;
    await context.executeSkill("/cool " + domain);
    return {
      code: 404,
      message,
    };
  }
}

### Generate a payment request


import { XMTPContext } from "@xmtp/message-kit";
import type { Skill } from "@xmtp/message-kit";

// Define Skill
export const paymentRequest: Skill[] = [
  {
    skill: "pay",
    examples: [
      "/pay 10 vitalik.eth",
      "/pay 1 usdc to 0xC60E6Bb79322392761BFe3081E302aEB79B30B03",
    ],
    description:
      "Send a specified amount of a cryptocurrency to a destination address. \nWhen tipping, you can assume it's 1 USDC.",
    handler: handler,
    params: {
      amount: {
        default: 10,
        type: "number",
      },
      token: {
        default: "usdc",
        type: "string",
        values: ["eth", "dai", "usdc", "degen"], // Accepted tokens
      },
      username: {
        default: "",
        type: "username",
      },
      address: {
        default: "",
        type: "address",
      },
    },
  },
];

// Handler Implementation
export async function handler(context: XMTPContext) {
  const {
    message: {
      content: {
        params: { amount, token, username, address },
      },
    },
  } = context;
  let receiverAddress = address;
  if (username) {
    receiverAddress = (await context.getUserInfo(username))?.address;
  }
  if (address) {
    // Prioritize address over username
    receiverAddress = address;
  }

  await context.requestPayment(receiverAddress, amount, token);
}


# Docs

# Structure

## File structure

Each app consists of the following files:

```
agent/
├── src/
│   └── index.ts
│   └── prompt.ts
│   └── plugins/
│       └── ...
│   └── skills/
│       └── ...
│   └── vibes/
│       └── ...
├── tsconfig.json
├── package.json
└── .env
```

## Agent

This is the main function that runs the listener.

```jsx
import { Agent, run, XMTPContext } from "@xmtp/message-kit";

const agent: Agent = {
  name: "Agent Name",
  tag: "@bot",
  description: "Agent Description",
  skills: [skill1, skill2],
  onMessage: async (context: XMTPContext) => {
        /* Logs every message in a conversation.
        If not declared, the agent will automatically use the defined skills.
        Alternatively, you can implement your own logic here. */
    },
  config: {
    // Optional parameters
  },
};
//starts the agent
run(agent);
```

#### Config parameters

- `privateKey`: the private key of the agent wallet, like any normal wallet private key.
- `experimental`: experimental features like logging all group messages. Default is `false`.
- `attachments`: to receive attachments. Default is `false`.
- `gptModel`: model to be used. Default is `gpt-4o`.
- `client`: Optional parameters to pass to the XMTP client.
- `agent`: Custom agent to be used. Default is to create the skills in the `src/skills.ts` file.
- `hideInitLogMessage`: hide the init log message with messagekit logo and stuff
- `memberChange`: if true, member changes will be enabled, like adding members to the group

## Skills

Skills are the actions of the agent. They are defined in the `src/skills/your-skill.ts` file.

```tsx
import { Skill } from "@xmtp/message-kit";

export const checkDomain: Skill[] = [
  {
    skill: // name of the skill
    handler: // function to handle the skill
    examples: // examples of the skill
    description: // description of the skill
    params: // params of the skill
  },
];
```

## Vibes

Vibes are the personalities of the agent. They are defined in the `src/vibes/your-vibe.ts` file.

```tsx
import { Vibe } from "@xmtp/message-kit";

export const chill: Vibe = {
  vibe: // name of the vibe
  description: // description of the vibe
  tone: // tone of the vibe
  style: // style of the vibe
};
```

> See [Vibes](/community/vibes) for more information.
